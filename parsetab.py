
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ARROW BOOL CLASS COL COMMA CTE_B CTE_F CTE_I CTE_S DIV DOT ELSE ELSEIF EQUAL FLOAT FUNCTION GEQ GT ID IF INIT INPUT INT IS LB LC LEQ LET LP LT MAIN MINUS MUL NEQ NOT OR PLUS PRINT PRIVATE RB RC RETURN RP SEMICOL VAR WHILEprogram   : program_a program_c program_d main\n    program_a  : program_b program_a\n    | empty\n    \n    program_b  : let prog1\n    | class prog2\n    \n    program_c  : var prog3 program_c\n    | empty\n    \n    program_d  : function prog4 program_d\n    | empty\n    prog1  :prog2  :prog3  :prog4  :\n    type    : atomic type3\n    \n    typeM    : LC CTE_I RC LC CTE_I RC atomic type1\n    | LC CTE_I RC atomic type2\n    | ID type4\n    type1  :type2  :type3  :type4  :\n    atomic  : INT atomic_type\n    | FLOAT atomic_type\n    | BOOL atomic_type\n    atomic_type    :\n    var    : VAR ID var1 COL type var2 var_a SEMICOL\n    |  VAR ID var1 COL typeM SEMICOL var2\n    \n    var_a   : IS var_b var3\n    | empty\n    var_b   : var_c type3\n    var_c   : CTE_I\n    | CTE_F\n    | CTE_B\n    var1    :var2    :var3    :let    : LET ID COL type IS var_b SEMICOLmain   : MAIN LP RP function_blockfunction   : FUNCTION ID LP params RP function_a function_block\n    function_a   : ARROW type\n    | empty\n    \n    params   : ID COL type params_a\n    | empty\n    \n    params_a   : COMMA params\n    | empty\n    block  : LB block_a RB\n    block_a : statement block_a\n    | empty\n    function_block   : LB function_block_a block_a RB\n    function_block_a   : function_block_b function_block_a\n    | empty\n    \n    function_block_b : var\n    | let\n    class     : CLASS ID class_a LB class_b init class_c class_d RB\n    class_a   : COL ID\n    | empty\n    \n    class_b : class_e class_f class_b\n    | empty\n    \n    class_e : PRIVATE\n    | empty\n    \n    class_f : var\n    | let\n    \n    class_c : init class_c\n    | empty\n    \n    class_d : class_e function class_d\n    | empty\n    init   : INIT LP params RP block\n    statement : print\n    | input\n    | assignment\n    | condition\n    | loop\n    | call_function\n    | return\n    return : RETURN expression SEMICOLobj : ID array attributeassignment : obj IS expression SEMICOLprint : PRINT LP print_a RP SEMICOL\n    print_a : expression\n    | CTE_S\n    | empty\n    input  : INPUT LP obj RP SEMICOLloop   : WHILE expression blockcall_function  : obj call_func SEMICOL\n    call_params    : expression call_params_a\n    | empty\n    \n    call_params_a  : COMMA expression call_params_a\n    | empty\n    condition  : IF expression block condition_a condition_b\n    condition_a  : elseif condition_a\n    | empty\n    \n    condition_b : else\n    | empty\n    elseif : ELSEIF expression blockelse   : ELSE blockexpression : comparison expression_a\n    expression_a    : AND comparison expression_a\n    | OR comparison\n    | empty\n    comparison    : exp comparison_a\n    comparison_a  : comparison_b exp comparison_a\n    | empty\n    \n    comparison_b  : GEQ\n    | LEQ\n    | GT\n    | LT\n    | EQUAL\n    | NEQ\n    exp    : term exp_a\n    exp_a   : PLUS term exp_a\n    | MINUS term exp_a\n    | empty\n    term    : factor term_a\n    term_a   : MUL factor term_a\n    | DIV factor term_a\n    | empty\n    \n    factor  : LP expression RP\n    | factor_a var_cte\n    \n    factor_a    : MINUS\n    | NOT\n    | empty\n    \n    var_cte : obj call_func_optional\n    | CTE_I\n    | CTE_F\n    | CTE_B\n    \n    array   : LC expression RC array_a\n    | empty\n    \n    array_a  : LC expression RC\n    | empty\n    \n    attribute   : DOT ID\n    | empty\n    call_func : LP call_params RP\n    call_func_optional : call_func\n    | empty\n    empty :'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,10,13,14,15,22,39,51,52,53,69,70,71,73,78,80,88,90,91,99,129,133,],[-135,12,-135,-3,-10,-11,-12,-2,-4,-5,12,-135,12,-60,-59,-135,-61,-62,12,-35,-37,12,-52,-53,-27,-26,-54,]),'FUNCTION':([0,2,3,4,5,6,9,10,11,13,14,15,19,22,30,32,53,67,78,80,82,83,84,99,101,103,104,127,129,133,134,136,163,236,],[-135,-135,-135,-3,-10,-11,21,-12,-7,-2,-4,-5,-13,-135,21,-6,-59,-135,-35,-37,-135,-135,-64,-27,-63,21,-60,-39,-26,-54,-135,-49,-67,-46,]),'MAIN':([0,2,3,4,5,6,9,10,11,13,14,15,18,19,20,22,30,32,42,78,80,99,127,129,133,136,],[-135,-135,-135,-3,-10,-11,-135,-12,-7,-2,-4,-5,29,-13,-9,-135,-135,-6,-8,-35,-37,-27,-39,-26,-54,-49,]),'LET':([0,3,5,6,14,15,39,51,52,53,69,70,71,73,78,80,88,90,91,99,129,133,],[7,7,-10,-11,-4,-5,-135,7,-60,-59,-135,-61,-62,7,-35,-37,7,-52,-53,-27,-26,-54,]),'CLASS':([0,3,5,6,14,15,80,133,],[8,8,-10,-11,-4,-5,-37,-54,]),'$end':([1,28,72,136,],[0,-1,-38,-49,]),'ID':([7,8,12,21,26,43,44,73,78,80,85,87,88,89,90,91,99,107,109,110,111,112,113,114,115,119,120,121,123,125,129,138,139,140,142,148,149,150,151,152,156,164,168,171,174,175,177,178,181,183,184,185,186,187,188,190,191,194,195,203,204,206,213,216,218,219,220,221,236,237,238,240,241,242,244,252,257,258,],[16,17,23,31,40,55,58,-135,-35,-37,55,122,-135,-51,-52,-53,-27,122,-68,-69,-70,-71,-72,-73,-74,-135,-135,-135,-50,55,-26,-135,122,-135,-135,-135,122,-119,-120,-121,-135,122,-121,-84,-121,-135,-135,-135,-135,-103,-104,-105,-106,-107,-108,-135,-135,-135,-135,-83,-75,233,-77,-135,-135,-135,-91,-135,-46,-78,-82,-89,-92,-93,-90,-135,-95,-94,]),'COL':([16,17,23,33,55,],[24,26,-34,44,74,]),'LB':([17,25,27,35,36,37,38,40,46,47,48,49,54,75,93,95,122,128,135,143,144,145,146,147,153,155,157,176,179,180,182,189,192,193,196,198,199,200,201,202,205,207,214,222,223,224,225,226,227,228,229,230,231,232,233,234,243,245,246,247,248,249,250,251,253,254,260,],[-135,39,-56,-20,-25,-25,-25,-55,-14,-22,-23,-24,73,-135,73,-41,-135,-40,164,164,-135,-135,-135,-135,164,-135,-127,-96,-99,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,-135,-98,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,164,164,-97,-101,-110,-111,-114,-115,-126,-129,-128,]),'INT':([24,44,74,94,100,209,],[36,36,36,36,36,36,]),'FLOAT':([24,44,74,94,100,209,],[37,37,37,37,37,37,]),'BOOL':([24,44,74,94,100,209,],[38,38,38,38,38,38,]),'LP':([29,31,68,116,117,118,119,120,121,122,138,140,142,148,155,156,157,177,178,181,183,184,185,186,187,188,190,191,194,195,199,205,207,216,221,233,234,252,253,254,260,],[41,43,85,138,139,142,148,148,148,-135,148,148,148,148,-135,148,-127,148,148,148,-103,-104,-105,-106,-107,-108,148,148,148,148,142,-76,-131,148,148,-130,-135,148,-126,-129,-128,]),'IS':([34,35,36,37,38,46,47,48,49,59,77,118,122,155,157,205,207,233,234,253,254,260,],[45,-20,-25,-25,-25,-14,-22,-23,-24,-35,97,140,-135,-135,-127,-76,-131,-130,-135,-126,-129,-128,]),'SEMICOL':([35,36,37,38,46,47,48,49,58,59,60,62,63,64,65,66,76,77,81,96,98,122,130,132,141,144,145,146,147,154,155,157,159,161,170,176,179,180,182,189,192,193,196,198,199,200,201,202,205,207,211,212,214,222,223,224,225,226,227,228,229,230,231,232,233,234,235,246,247,248,249,250,251,253,254,255,260,],[-20,-25,-25,-25,-14,-22,-23,-24,-21,-35,78,80,-20,-31,-32,-33,-17,-135,-30,129,-29,-135,-36,-19,171,-135,-135,-135,-135,204,-135,-127,-28,-16,213,-96,-99,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,237,238,-132,-135,-98,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-18,-97,-101,-110,-111,-114,-115,-126,-129,-15,-128,]),'COMMA':([35,36,37,38,46,47,48,49,92,122,144,145,146,147,155,157,173,176,179,180,182,189,192,193,196,198,199,200,201,202,205,207,214,222,223,224,225,226,227,228,229,230,231,232,233,234,239,246,247,248,249,250,251,253,254,260,],[-20,-25,-25,-25,-14,-22,-23,-24,125,-135,-135,-135,-135,-135,-135,-127,216,-96,-99,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,-135,-98,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,216,-97,-101,-110,-111,-114,-115,-126,-129,-128,]),'RP':([35,36,37,38,41,43,46,47,48,49,56,57,85,92,105,122,124,125,126,138,142,144,145,146,147,155,157,158,165,166,167,168,169,172,173,174,176,179,180,182,189,192,193,196,197,198,199,200,201,202,205,207,214,215,217,222,223,224,225,226,227,228,229,230,231,232,233,234,239,246,247,248,249,250,251,253,254,256,260,],[-20,-25,-25,-25,54,-135,-14,-22,-23,-24,75,-43,-135,-135,135,-135,-42,-135,-45,-135,-135,-135,-135,-135,-135,-135,-127,-44,211,-79,-80,-81,212,214,-135,-86,-96,-99,-100,-102,-109,-112,-113,-116,229,-118,-135,-123,-124,-125,-76,-131,-132,-85,-88,-135,-98,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-135,-97,-101,-110,-111,-114,-115,-126,-129,-87,-128,]),'PRIVATE':([39,67,69,70,71,78,80,82,83,84,99,101,127,129,134,136,163,236,],[53,-135,53,-61,-62,-35,-37,-135,53,-64,-27,-63,-39,-26,53,-49,-67,-46,]),'INIT':([39,50,52,67,69,70,71,78,80,82,86,99,129,163,236,],[-135,68,-58,68,-135,-61,-62,-35,-37,68,-57,-27,-26,-67,-46,]),'LC':([44,100,122,234,],[61,131,156,252,]),'CTE_I':([45,61,97,119,120,121,131,138,140,142,148,149,150,151,152,156,168,174,177,178,181,183,184,185,186,187,188,190,191,194,195,216,221,252,],[64,79,64,-135,-135,-135,160,-135,-135,-135,-135,200,-119,-120,-121,-135,-121,-121,-135,-135,-135,-103,-104,-105,-106,-107,-108,-135,-135,-135,-135,-135,-135,-135,]),'CTE_F':([45,97,119,120,121,138,140,142,148,149,150,151,152,156,168,174,177,178,181,183,184,185,186,187,188,190,191,194,195,216,221,252,],[65,65,-135,-135,-135,-135,-135,-135,-135,201,-119,-120,-121,-135,-121,-121,-135,-135,-135,-103,-104,-105,-106,-107,-108,-135,-135,-135,-135,-135,-135,-135,]),'CTE_B':([45,97,119,120,121,138,140,142,148,149,150,151,152,156,168,174,177,178,181,183,184,185,186,187,188,190,191,194,195,216,221,252,],[66,66,-135,-135,-135,-135,-135,-135,-135,202,-119,-120,-121,-135,-121,-121,-135,-135,-135,-103,-104,-105,-106,-107,-108,-135,-135,-135,-135,-135,-135,-135,]),'RB':([67,73,78,80,82,83,84,87,88,89,90,91,99,101,102,104,106,107,108,109,110,111,112,113,114,115,123,127,129,134,136,137,162,163,164,171,175,203,204,210,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-135,-35,-37,-135,-135,-64,-135,-135,-51,-52,-53,-27,-63,133,-66,136,-135,-48,-68,-69,-70,-71,-72,-73,-74,-50,-39,-26,-135,-49,-47,-65,-67,-135,-84,-135,-83,-75,236,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'PRINT':([73,78,80,87,88,89,90,91,99,107,109,110,111,112,113,114,115,123,129,164,171,175,203,204,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-35,-37,116,-135,-51,-52,-53,-27,116,-68,-69,-70,-71,-72,-73,-74,-50,-26,116,-84,-135,-83,-75,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'INPUT':([73,78,80,87,88,89,90,91,99,107,109,110,111,112,113,114,115,123,129,164,171,175,203,204,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-35,-37,117,-135,-51,-52,-53,-27,117,-68,-69,-70,-71,-72,-73,-74,-50,-26,117,-84,-135,-83,-75,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'IF':([73,78,80,87,88,89,90,91,99,107,109,110,111,112,113,114,115,123,129,164,171,175,203,204,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-35,-37,119,-135,-51,-52,-53,-27,119,-68,-69,-70,-71,-72,-73,-74,-50,-26,119,-84,-135,-83,-75,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'WHILE':([73,78,80,87,88,89,90,91,99,107,109,110,111,112,113,114,115,123,129,164,171,175,203,204,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-35,-37,120,-135,-51,-52,-53,-27,120,-68,-69,-70,-71,-72,-73,-74,-50,-26,120,-84,-135,-83,-75,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'RETURN':([73,78,80,87,88,89,90,91,99,107,109,110,111,112,113,114,115,123,129,164,171,175,203,204,213,218,219,220,236,237,238,240,241,242,244,257,258,],[-135,-35,-37,121,-135,-51,-52,-53,-27,121,-68,-69,-70,-71,-72,-73,-74,-50,-26,121,-84,-135,-83,-75,-77,-135,-135,-91,-46,-78,-82,-89,-92,-93,-90,-95,-94,]),'ARROW':([75,],[94,]),'RC':([79,122,144,145,146,147,155,157,160,176,179,180,182,189,192,193,196,198,199,200,201,202,205,207,208,214,222,223,224,225,226,227,228,229,230,231,232,233,234,246,247,248,249,250,251,253,254,259,260,],[100,-135,-135,-135,-135,-135,-135,-127,209,-96,-99,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,234,-132,-135,-98,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-97,-101,-110,-111,-114,-115,-126,-129,260,-128,]),'MINUS':([119,120,121,122,138,140,142,146,147,148,155,156,157,177,178,181,183,184,185,186,187,188,190,191,193,194,195,196,198,199,200,201,202,205,207,214,216,221,225,226,227,228,229,230,231,232,233,234,250,251,252,253,254,260,],[150,150,150,-135,150,150,150,191,-135,150,-135,150,-127,150,150,150,-103,-104,-105,-106,-107,-108,150,150,-113,150,150,-116,-118,-135,-123,-124,-125,-76,-131,-132,150,150,191,191,-135,-135,-117,-122,-133,-134,-130,-135,-114,-115,150,-126,-129,-128,]),'NOT':([119,120,121,138,140,142,148,156,177,178,181,183,184,185,186,187,188,190,191,194,195,216,221,252,],[151,151,151,151,151,151,151,151,151,151,151,-103,-104,-105,-106,-107,-108,151,151,151,151,151,151,151,]),'DOT':([122,155,157,234,253,254,260,],[-135,206,-127,-135,-126,-129,-128,]),'MUL':([122,147,155,157,198,199,200,201,202,205,207,214,227,228,229,230,231,232,233,234,253,254,260,],[-135,194,-135,-127,-118,-135,-123,-124,-125,-76,-131,-132,194,194,-117,-122,-133,-134,-130,-135,-126,-129,-128,]),'DIV':([122,147,155,157,198,199,200,201,202,205,207,214,227,228,229,230,231,232,233,234,253,254,260,],[-135,195,-135,-127,-118,-135,-123,-124,-125,-76,-131,-132,195,195,-117,-122,-133,-134,-130,-135,-126,-129,-128,]),'PLUS':([122,146,147,155,157,193,196,198,199,200,201,202,205,207,214,225,226,227,228,229,230,231,232,233,234,250,251,253,254,260,],[-135,190,-135,-135,-127,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,190,190,-135,-135,-117,-122,-133,-134,-130,-135,-114,-115,-126,-129,-128,]),'GEQ':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,183,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,183,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'LEQ':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,184,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,184,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'GT':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,185,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,185,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'LT':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,186,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,186,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'EQUAL':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,187,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,187,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'NEQ':([122,145,146,147,155,157,189,192,193,196,198,199,200,201,202,205,207,214,224,225,226,227,228,229,230,231,232,233,234,248,249,250,251,253,254,260,],[-135,188,-135,-135,-135,-127,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,188,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-110,-111,-114,-115,-126,-129,-128,]),'AND':([122,144,145,146,147,155,157,180,182,189,192,193,196,198,199,200,201,202,205,207,214,222,224,225,226,227,228,229,230,231,232,233,234,247,248,249,250,251,253,254,260,],[-135,177,-135,-135,-135,-135,-127,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,177,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-101,-110,-111,-114,-115,-126,-129,-128,]),'OR':([122,144,145,146,147,155,157,180,182,189,192,193,196,198,199,200,201,202,205,207,214,222,224,225,226,227,228,229,230,231,232,233,234,247,248,249,250,251,253,254,260,],[-135,178,-135,-135,-135,-135,-127,-100,-102,-109,-112,-113,-116,-118,-135,-123,-124,-125,-76,-131,-132,178,-135,-135,-135,-135,-135,-117,-122,-133,-134,-130,-135,-101,-110,-111,-114,-115,-126,-129,-128,]),'CTE_S':([138,],[167,]),'ELSEIF':([175,219,236,258,],[221,221,-46,-94,]),'ELSE':([175,218,219,220,236,244,258,],[-135,243,-135,-91,-46,-90,-94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_a':([0,3,],[2,13,]),'program_b':([0,3,],[3,3,]),'empty':([0,2,3,9,17,22,30,39,43,67,69,73,75,77,82,83,85,87,88,92,107,119,120,121,122,125,134,138,140,142,144,145,146,147,148,155,156,164,173,175,177,178,181,190,191,194,195,199,216,218,219,221,222,224,225,226,227,228,234,239,252,],[4,11,4,20,27,11,20,52,57,84,52,89,95,98,84,104,57,108,89,126,108,152,152,152,157,57,104,168,152,174,179,182,192,196,152,207,152,108,217,220,152,152,152,152,152,152,152,232,152,242,220,152,179,182,192,192,196,196,254,217,152,]),'let':([0,3,51,73,88,],[5,5,71,91,91,]),'class':([0,3,],[6,6,]),'program_c':([2,22,],[9,32,]),'var':([2,22,51,73,88,],[10,10,70,90,90,]),'prog1':([5,],[14,]),'prog2':([6,],[15,]),'program_d':([9,30,],[18,42,]),'function':([9,30,103,],[19,19,134,]),'prog3':([10,],[22,]),'class_a':([17,],[25,]),'main':([18,],[28,]),'prog4':([19,],[30,]),'var1':([23,],[33,]),'type':([24,44,74,94,],[34,59,92,128,]),'atomic':([24,44,74,94,100,209,],[35,35,35,35,132,235,]),'type3':([35,63,],[46,81,]),'atomic_type':([36,37,38,],[47,48,49,]),'class_b':([39,69,],[50,86,]),'class_e':([39,69,83,134,],[51,51,103,103,]),'params':([43,85,125,],[56,105,158,]),'typeM':([44,],[60,]),'var_b':([45,97,],[62,130,]),'var_c':([45,97,],[63,63,]),'init':([50,67,82,],[67,82,82,]),'class_f':([51,],[69,]),'function_block':([54,93,],[72,127,]),'type4':([58,],[76,]),'var2':([59,78,],[77,99,]),'class_c':([67,82,],[83,101,]),'function_block_a':([73,88,],[87,123,]),'function_block_b':([73,88,],[88,88,]),'function_a':([75,],[93,]),'var_a':([77,],[96,]),'class_d':([83,134,],[102,162,]),'block_a':([87,107,164,],[106,137,210,]),'statement':([87,107,164,],[107,107,107,]),'print':([87,107,164,],[109,109,109,]),'input':([87,107,164,],[110,110,110,]),'assignment':([87,107,164,],[111,111,111,]),'condition':([87,107,164,],[112,112,112,]),'loop':([87,107,164,],[113,113,113,]),'call_function':([87,107,164,],[114,114,114,]),'return':([87,107,164,],[115,115,115,]),'obj':([87,107,139,149,164,],[118,118,169,199,118,]),'params_a':([92,],[124,]),'call_func':([118,199,],[141,231,]),'expression':([119,120,121,138,140,142,148,156,216,221,252,],[143,153,154,166,170,173,197,208,239,245,259,]),'comparison':([119,120,121,138,140,142,148,156,177,178,216,221,252,],[144,144,144,144,144,144,144,144,222,223,144,144,144,]),'exp':([119,120,121,138,140,142,148,156,177,178,181,216,221,252,],[145,145,145,145,145,145,145,145,145,145,224,145,145,145,]),'term':([119,120,121,138,140,142,148,156,177,178,181,190,191,216,221,252,],[146,146,146,146,146,146,146,146,146,146,146,225,226,146,146,146,]),'factor':([119,120,121,138,140,142,148,156,177,178,181,190,191,194,195,216,221,252,],[147,147,147,147,147,147,147,147,147,147,147,147,147,227,228,147,147,147,]),'factor_a':([119,120,121,138,140,142,148,156,177,178,181,190,191,194,195,216,221,252,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'array':([122,],[155,]),'var3':([130,],[159,]),'type2':([132,],[161,]),'block':([135,143,153,243,245,],[163,175,203,257,258,]),'print_a':([138,],[165,]),'call_params':([142,],[172,]),'expression_a':([144,222,],[176,246,]),'comparison_a':([145,224,],[180,247,]),'comparison_b':([145,224,],[181,181,]),'exp_a':([146,225,226,],[189,248,249,]),'term_a':([147,227,228,],[193,250,251,]),'var_cte':([149,],[198,]),'attribute':([155,],[205,]),'call_params_a':([173,239,],[215,256,]),'condition_a':([175,219,],[218,244,]),'elseif':([175,219,],[219,219,]),'call_func_optional':([199,],[230,]),'condition_b':([218,],[240,]),'else':([218,],[241,]),'array_a':([234,],[253,]),'type1':([235,],[255,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_a program_c program_d main','program',4,'p_program','yacc.py',11),
  ('program_a -> program_b program_a','program_a',2,'p_program_a','yacc.py',15),
  ('program_a -> empty','program_a',1,'p_program_a','yacc.py',16),
  ('program_b -> let prog1','program_b',2,'p_program_b','yacc.py',20),
  ('program_b -> class prog2','program_b',2,'p_program_b','yacc.py',21),
  ('program_c -> var prog3 program_c','program_c',3,'p_program_c','yacc.py',25),
  ('program_c -> empty','program_c',1,'p_program_c','yacc.py',26),
  ('program_d -> function prog4 program_d','program_d',3,'p_program_d','yacc.py',31),
  ('program_d -> empty','program_d',1,'p_program_d','yacc.py',32),
  ('prog1 -> <empty>','prog1',0,'p_prog1','yacc.py',39),
  ('prog2 -> <empty>','prog2',0,'p_prog2','yacc.py',44),
  ('prog3 -> <empty>','prog3',0,'p_prog3','yacc.py',52),
  ('prog4 -> <empty>','prog4',0,'p_prog4','yacc.py',57),
  ('type -> atomic type3','type',2,'p_type','yacc.py',66),
  ('typeM -> LC CTE_I RC LC CTE_I RC atomic type1','typeM',8,'p_typeM','yacc.py',72),
  ('typeM -> LC CTE_I RC atomic type2','typeM',5,'p_typeM','yacc.py',73),
  ('typeM -> ID type4','typeM',2,'p_typeM','yacc.py',74),
  ('type1 -> <empty>','type1',0,'p_type1','yacc.py',84),
  ('type2 -> <empty>','type2',0,'p_type2','yacc.py',92),
  ('type3 -> <empty>','type3',0,'p_type3','yacc.py',98),
  ('type4 -> <empty>','type4',0,'p_type4','yacc.py',102),
  ('atomic -> INT atomic_type','atomic',2,'p_atomic','yacc.py',112),
  ('atomic -> FLOAT atomic_type','atomic',2,'p_atomic','yacc.py',113),
  ('atomic -> BOOL atomic_type','atomic',2,'p_atomic','yacc.py',114),
  ('atomic_type -> <empty>','atomic_type',0,'p_atomic_type','yacc.py',122),
  ('var -> VAR ID var1 COL type var2 var_a SEMICOL','var',8,'p_var','yacc.py',130),
  ('var -> VAR ID var1 COL typeM SEMICOL var2','var',7,'p_var','yacc.py',131),
  ('var_a -> IS var_b var3','var_a',3,'p_var_a','yacc.py',137),
  ('var_a -> empty','var_a',1,'p_var_a','yacc.py',138),
  ('var_b -> var_c type3','var_b',2,'p_var_b','yacc.py',142),
  ('var_c -> CTE_I','var_c',1,'p_var_c','yacc.py',146),
  ('var_c -> CTE_F','var_c',1,'p_var_c','yacc.py',147),
  ('var_c -> CTE_B','var_c',1,'p_var_c','yacc.py',148),
  ('var1 -> <empty>','var1',0,'p_var1','yacc.py',155),
  ('var2 -> <empty>','var2',0,'p_var2','yacc.py',160),
  ('var3 -> <empty>','var3',0,'p_var3','yacc.py',164),
  ('let -> LET ID COL type IS var_b SEMICOL','let',7,'p_let','yacc.py',171),
  ('main -> MAIN LP RP function_block','main',4,'p_main','yacc.py',174),
  ('function -> FUNCTION ID LP params RP function_a function_block','function',7,'p_function','yacc.py',177),
  ('function_a -> ARROW type','function_a',2,'p_function_a','yacc.py',181),
  ('function_a -> empty','function_a',1,'p_function_a','yacc.py',182),
  ('params -> ID COL type params_a','params',4,'p_params','yacc.py',187),
  ('params -> empty','params',1,'p_params','yacc.py',188),
  ('params_a -> COMMA params','params_a',2,'p_params_a','yacc.py',193),
  ('params_a -> empty','params_a',1,'p_params_a','yacc.py',194),
  ('block -> LB block_a RB','block',3,'p_block','yacc.py',198),
  ('block_a -> statement block_a','block_a',2,'p_block_a','yacc.py',203),
  ('block_a -> empty','block_a',1,'p_block_a','yacc.py',204),
  ('function_block -> LB function_block_a block_a RB','function_block',4,'p_function_block','yacc.py',208),
  ('function_block_a -> function_block_b function_block_a','function_block_a',2,'p_function_block_a','yacc.py',212),
  ('function_block_a -> empty','function_block_a',1,'p_function_block_a','yacc.py',213),
  ('function_block_b -> var','function_block_b',1,'p_function_block_b','yacc.py',218),
  ('function_block_b -> let','function_block_b',1,'p_function_block_b','yacc.py',219),
  ('class -> CLASS ID class_a LB class_b init class_c class_d RB','class',9,'p_class','yacc.py',229),
  ('class_a -> COL ID','class_a',2,'p_class_a','yacc.py',233),
  ('class_a -> empty','class_a',1,'p_class_a','yacc.py',234),
  ('class_b -> class_e class_f class_b','class_b',3,'p_class_b','yacc.py',239),
  ('class_b -> empty','class_b',1,'p_class_b','yacc.py',240),
  ('class_e -> PRIVATE','class_e',1,'p_class_e','yacc.py',245),
  ('class_e -> empty','class_e',1,'p_class_e','yacc.py',246),
  ('class_f -> var','class_f',1,'p_class_f','yacc.py',251),
  ('class_f -> let','class_f',1,'p_class_f','yacc.py',252),
  ('class_c -> init class_c','class_c',2,'p_class_c','yacc.py',257),
  ('class_c -> empty','class_c',1,'p_class_c','yacc.py',258),
  ('class_d -> class_e function class_d','class_d',3,'p_class_d','yacc.py',263),
  ('class_d -> empty','class_d',1,'p_class_d','yacc.py',264),
  ('init -> INIT LP params RP block','init',5,'p_init','yacc.py',267),
  ('statement -> print','statement',1,'p_statement','yacc.py',271),
  ('statement -> input','statement',1,'p_statement','yacc.py',272),
  ('statement -> assignment','statement',1,'p_statement','yacc.py',273),
  ('statement -> condition','statement',1,'p_statement','yacc.py',274),
  ('statement -> loop','statement',1,'p_statement','yacc.py',275),
  ('statement -> call_function','statement',1,'p_statement','yacc.py',276),
  ('statement -> return','statement',1,'p_statement','yacc.py',277),
  ('return -> RETURN expression SEMICOL','return',3,'p_return','yacc.py',281),
  ('obj -> ID array attribute','obj',3,'p_obj','yacc.py',284),
  ('assignment -> obj IS expression SEMICOL','assignment',4,'p_assignement','yacc.py',287),
  ('print -> PRINT LP print_a RP SEMICOL','print',5,'p_print','yacc.py',290),
  ('print_a -> expression','print_a',1,'p_print_a','yacc.py',294),
  ('print_a -> CTE_S','print_a',1,'p_print_a','yacc.py',295),
  ('print_a -> empty','print_a',1,'p_print_a','yacc.py',296),
  ('input -> INPUT LP obj RP SEMICOL','input',5,'p_input','yacc.py',299),
  ('loop -> WHILE expression block','loop',3,'p_loop','yacc.py',302),
  ('call_function -> obj call_func SEMICOL','call_function',3,'p_call_function','yacc.py',305),
  ('call_params -> expression call_params_a','call_params',2,'p_call_params','yacc.py',309),
  ('call_params -> empty','call_params',1,'p_call_params','yacc.py',310),
  ('call_params_a -> COMMA expression call_params_a','call_params_a',3,'p_call_params_a','yacc.py',314),
  ('call_params_a -> empty','call_params_a',1,'p_call_params_a','yacc.py',315),
  ('condition -> IF expression block condition_a condition_b','condition',5,'p_condition','yacc.py',318),
  ('condition_a -> elseif condition_a','condition_a',2,'p_condition_a','yacc.py',322),
  ('condition_a -> empty','condition_a',1,'p_condition_a','yacc.py',323),
  ('condition_b -> else','condition_b',1,'p_condition_b','yacc.py',328),
  ('condition_b -> empty','condition_b',1,'p_condition_b','yacc.py',329),
  ('elseif -> ELSEIF expression block','elseif',3,'p_elseif','yacc.py',333),
  ('else -> ELSE block','else',2,'p_else','yacc.py',336),
  ('expression -> comparison expression_a','expression',2,'p_expression','yacc.py',339),
  ('expression_a -> AND comparison expression_a','expression_a',3,'p_expression_a','yacc.py',343),
  ('expression_a -> OR comparison','expression_a',2,'p_expression_a','yacc.py',344),
  ('expression_a -> empty','expression_a',1,'p_expression_a','yacc.py',345),
  ('comparison -> exp comparison_a','comparison',2,'p_comparison','yacc.py',349),
  ('comparison_a -> comparison_b exp comparison_a','comparison_a',3,'p_comparison_a','yacc.py',353),
  ('comparison_a -> empty','comparison_a',1,'p_comparison_a','yacc.py',354),
  ('comparison_b -> GEQ','comparison_b',1,'p_comparison_b','yacc.py',358),
  ('comparison_b -> LEQ','comparison_b',1,'p_comparison_b','yacc.py',359),
  ('comparison_b -> GT','comparison_b',1,'p_comparison_b','yacc.py',360),
  ('comparison_b -> LT','comparison_b',1,'p_comparison_b','yacc.py',361),
  ('comparison_b -> EQUAL','comparison_b',1,'p_comparison_b','yacc.py',362),
  ('comparison_b -> NEQ','comparison_b',1,'p_comparison_b','yacc.py',363),
  ('exp -> term exp_a','exp',2,'p_exp','yacc.py',367),
  ('exp_a -> PLUS term exp_a','exp_a',3,'p_exp_a','yacc.py',371),
  ('exp_a -> MINUS term exp_a','exp_a',3,'p_exp_a','yacc.py',372),
  ('exp_a -> empty','exp_a',1,'p_exp_a','yacc.py',373),
  ('term -> factor term_a','term',2,'p_term','yacc.py',377),
  ('term_a -> MUL factor term_a','term_a',3,'p_term_a','yacc.py',380),
  ('term_a -> DIV factor term_a','term_a',3,'p_term_a','yacc.py',381),
  ('term_a -> empty','term_a',1,'p_term_a','yacc.py',382),
  ('factor -> LP expression RP','factor',3,'p_factor','yacc.py',387),
  ('factor -> factor_a var_cte','factor',2,'p_factor','yacc.py',388),
  ('factor_a -> MINUS','factor_a',1,'p_factor_a','yacc.py',392),
  ('factor_a -> NOT','factor_a',1,'p_factor_a','yacc.py',393),
  ('factor_a -> empty','factor_a',1,'p_factor_a','yacc.py',394),
  ('var_cte -> obj call_func_optional','var_cte',2,'p_var_cte','yacc.py',398),
  ('var_cte -> CTE_I','var_cte',1,'p_var_cte','yacc.py',399),
  ('var_cte -> CTE_F','var_cte',1,'p_var_cte','yacc.py',400),
  ('var_cte -> CTE_B','var_cte',1,'p_var_cte','yacc.py',401),
  ('array -> LC expression RC array_a','array',4,'p_array','yacc.py',405),
  ('array -> empty','array',1,'p_array','yacc.py',406),
  ('array_a -> LC expression RC','array_a',3,'p_array_a','yacc.py',410),
  ('array_a -> empty','array_a',1,'p_array_a','yacc.py',411),
  ('attribute -> DOT ID','attribute',2,'p_attribute','yacc.py',416),
  ('attribute -> empty','attribute',1,'p_attribute','yacc.py',417),
  ('call_func -> LP call_params RP','call_func',3,'p_call_func','yacc.py',421),
  ('call_func_optional -> call_func','call_func_optional',1,'p_call_func_optional','yacc.py',425),
  ('call_func_optional -> empty','call_func_optional',1,'p_call_func_optional','yacc.py',426),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',433),
]
